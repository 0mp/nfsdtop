#!/bin/sh
############################################################ IDENT(1)
#
# $Title: Script to generate top-like statistics for nfsd I/O $
# $Copyright: 2020 Devin Teske. All rights reserved. $
# $FrauBSD: nfsdtop/nfsdtop 2020-03-10 17:01:26 -0700 freebsdfrau $
#
############################################################ DEFAULTS

DEFAULT_INTERVAL=2 # seconds

#
# User/Group map files
#
DEFAULT_PASSWD_MAP=.nfsd.passwd
DEFAULT_GROUP_MAP=.nfsd.group

############################################################ GLOBALS

VERSION='$Version: 1.0-beta-1 $'

pgm="${0##*/}" # Program basename

#
# Global exit status
#
SUCCESS=0
FAILURE=1

#
# Command-line options
#
DEBUG=					# -d
FILTER_FILE=				# -F file
FILTER_GROUP=				# -G group
FILTER_USER=				# -U user
GROUP_MAP="$DEFAULT_GROUP_MAP"		# -P file
INTERVAL=$DEFAULT_INTERVAL		# -i sec
NO_NAMES=				# -n
OUTPUT_JSON=				# -j
PASSWD_MAP="$DEFAULT_PASSWD_MAP"	# -p file
RAW_VIEW=				# -r
VIEW_CLIENT=				# -c
VIEW_FILE=				# -f
VIEW_GROUP=				# -g
VIEW_SERVER=				# -s
VIEW_USER=1				# -u (default)
WIDE_VIEW=				# -w

#
# Miscellaneous
#
_FILTER_GROUP=
_FILTER_USER=
INTERVAL_PROBE= # Calculated
INTERVAL_SECONDS= # Raw value for awk

############################################################ FUNCTIONS

die()
{
	local fmt="$1"
	if [ "$fmt" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@" >&2
	fi
	exit $FAILURE
}

usage()
{
	local fmt="$1"
	local optfmt="\t%-11s %s\n"

	exec >&2
	if [ "$1" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@"
	fi

	printf "Usage: %s [OPTIONS]\n" "$pgm"
	printf "Options:\n"
	printf "$optfmt" "-c" "View read/write activity by client IP."
	printf "$optfmt" "-d" "Debug. Print bpftrace script and exit."
	printf "$optfmt" "-F file" "File filter (regex). Implies \`-f'."
	printf "$optfmt" "-f" \
		"View read/write activity by file. Implies \`-w'."
	printf "$optfmt" "-G group" "Group filter (name or id)."
	printf "$optfmt" "-g" "View read/write activity by group."
	printf "$optfmt" "-h" "Print usage statement and exit."
	printf "$optfmt" "-i sec" \
		"Set interval seconds. Default $DEFAULT_INTERVAL."
	printf "$optfmt" "" "Accepts decimal point on seconds."
	printf "$optfmt" "-j" "Output JSON formatted data."
	printf "$optfmt" "-n" "Do not attempt to map uid/gid to names."
	printf "$optfmt" "-P file" "Group map file. Default \`$GROUP_MAP'."
	printf "$optfmt" "-p file" "User map file. Default \`$PASSWD_MAP'."
	printf "$optfmt" "-r" "Raw view. Do not format output of bpftrace."
	printf "$optfmt" "-s" "View read/write activity by server IP."
	printf "$optfmt" "-U group" "User filter (name or id)."
	printf "$optfmt" "-u" "View read/write activity by user (default)."
	printf "$optfmt" "-v" "Print version and exit."
	printf "$optfmt" "-w" "Wide view. Maximize width of first column."

	die
}

run_bpftrace()
{
	if [ "$DEBUG" ]; then
		cat "$@"
	else
		exec bpftrace "$@"
	fi
}

############################################################ MAIN

#
# Parse command-line options
#
while getopts cdF:fG:ghi:jnP:p:rsU:uvw flag; do
	case "$flag" in
	c) VIEW_CLIENT=1 VIEW_FILE= VIEW_GROUP= VIEW_SERVER= VIEW_USER= ;;
	d) DEBUG=1 RAW_VIEW=1 ;;
	F) FILTER_FILE="$OPTARG" VIEW_FILE=1 WIDE_VIEW=1 \
		VIEW_CLIENT= VIEW_GROUP= VIEW_SERVER= VIEW_USER= ;;
	f) VIEW_FILE=1 WIDE_VIEW=1 \
		VIEW_CLIENT= VIEW_GROUP= VIEW_SERVER= VIEW_USER= ;;
	G) FILTER_GROUP="$OPTARG" ;;
	g) VIEW_GROUP=1 VIEW_CLIENT= VIEW_FILE= VIEW_SERVER= VIEW_USER= ;;
	i) INTERVAL="$OPTARG" ;;
	j) OUTPUT_JSON=1 ;;
	n) NO_NAMES=1 ;;
	P) GROUP_MAP="$OPTARG" ;;
	p) PASSWD_MAP="$OPTARG" ;;
	r) RAW_VIEW=1 ;;
	s) VIEW_SERVER=1 VIEW_CLIENT= VIEW_FILE= VIEW_GROUP= VIEW_USER= ;;
	U) FILTER_USER="$OPTARG" ;;
	u) VIEW_USER=1 VIEW_CLIENT= VIEW_FILE= VIEW_GROUP= VIEW_SERVER= ;;
	v) VERSION="${VERSION#*: }"
		echo "${VERSION% $}"
		exit $SUCCESS ;;
	w) WIDE_VIEW=1 ;;
	*) usage # NOTREACHED
	esac
done
shift $(( $OPTIND - 1 ))

#
# Check command-line arguments
#
[ $# -eq 0 ] || usage "Too many arguments" # NOTREACHED

#
# Validate command-line options
#
case "$INTERVAL" in
"") die "missing -i argument" ;;
0) die "-i sec must be non-zero" ;;
*[!0-9.]*|*.*.*|.) die "-i argument must be a number" ;;
*.*)
	INTERVAL_SECONDS=$INTERVAL
	ms=$( echo "$INTERVAL * 1000" | bc )
	INTERVAL_PROBE=interval:ms:${ms%%.*}
	;;
*)
	INTERVAL_SECONDS=$INTERVAL
	INTERVAL_PROBE=interval:s:$INTERVAL_SECONDS
esac

#
# Process `-G group' option
#
case "$FILTER_GROUP" in
"") : ok ;;
*[!0-9]*) # name
	_FILTER_GROUP=$( awk \
		-v sq="'" \
		-v group_map="$GROUP_MAP" \
		-v name="$FILTER_GROUP" \
	'BEGIN {
		delete gid2name
		while (getline < group_map > 0) {
			n = split($0, fields, /:/)
			name2gid[fields[1]] = fields[3]
		}
		close(group_map)
		if (name in name2gid) {
			print name2gid[name]
			exit 0
		}
		gsub(sq, "&\\\\&&", name)
		cmd = sprintf("getent group %s%s%s", sq, name, sq)
		cmd | getline group
		close(cmd)
		if (split(group, fields, /:/) >= 3) {
			print fields[3]
			exit 0
		}
		exit 1
	}' 2> /dev/null ) || die "Unknown group %s" "$FILTER_GROUP"
	FILTER_GROUP="$_FILTER_GROUP"
	;;
esac

#
# Process `-U group' option
#
case "$FILTER_USER" in
"") : ok ;;
*[!0-9]*) # name
	_FILTER_USER=$( awk \
		-v sq="'" \
		-v user_map="$PASSWD_MAP" \
		-v name="$FILTER_USER" \
	'BEGIN {
		delete uid2name
		while (getline < user_map > 0) {
			n = split($0, fields, /:/)
			name2uid[fields[1]] = fields[3]
		}
		close(user_map)
		if (name in name2uid) {
			print name2uid[name]
			exit 0
		}
		gsub(sq, "&\\\\&&", name)
		cmd = sprintf("getent passwd %s%s%s", sq, name, sq)
		cmd | getline passwd
		close(cmd)
		if (split(passwd, fields, /:/) >= 3) {
			print fields[3]
			exit 0
		}
		exit 1
	}' ) || die "Unknown user %s" "$FILTER_USER"
	FILTER_USER="$_FILTER_USER"
	;;
esac

#
# Get terminal size
#
size=$( stty size 2> /dev/null )
if [ "$size" ]; then
	cols="${size#*[$IFS]}"
	rows="${size%%[$IFS]*}"
	case "$rows$cols" in
	*[!0-9]*)
		cols=80
		rows=24
		;;
	esac
fi

#
# Trace nfsd I/O
#
export FILTER_FILE
run_bpftrace /dev/stdin <<EOF | awk \
	-v cols=$cols \
	-v group_map="$GROUP_MAP" \
	-v interval=$INTERVAL_SECONDS \
	-v no_names=${NO_NAMES:-0} \
	-v output_json=${OUTPUT_JSON:-0} \
	-v passwd_map="$PASSWD_MAP" \
	-v raw_view=${RAW_VIEW:-0} \
	-v rows=$rows \
	-v view_client=${VIEW_CLIENT:-0} \
	-v view_file=${VIEW_FILE:-0} \
	-v view_group=${VIEW_GROUP:-0} \
	-v view_server=${VIEW_SERVER:-0} \
	-v view_user=${VIEW_USER:-0} \
	-v wide_view=${WIDE_VIEW:-0} \
	'####################################### BEGIN

	BEGIN {
		filter_file = ENVIRON["FILTER_FILE"]
		waiting = "Waiting for bpftrace to initialize ..."

		if (wide_view) {
			vsz = cols - 36 - 4 - 21 # Maximize view column
				# 36 = 3 x %12s
				#  4 = number of spaces
				# 21 = minimum bar size
		} else {
			vsz = 15 # Maximize bar column
		}

		fmt = "%-"vsz"s %12s %12s %*s|%-*s %-12s\n"
		bar_size = (cols - vsz - 36 - 4 - 1) / 2
			# 36 = 3 x %12s
			#  4 = number of spaces
			#  1 = balance odd cols
		fmtsz = vsz + 36 + 4 + int(bar_size) * 2 + 1
			# 36 = 3 x %12s
			#  4 = number of spaces
			#  1 = "|" between bars

		# Column headers
		if (view_client) {
			view = "CLIENT"
		} else if (view_file) {
			view = "FILE"
		} else if (view_group) {
			view = "GROUP"
		} else if (view_server) {
			view = "SERVER"
		} else { # Default
			view = "USER"
		}

		if (!raw_view) {
			clear_buffer()
			buffer_add_header()
			if (!output_json) {
				buffer_add(waiting "\n")
				print_buffer()
			}
			if (!no_names) load_files()
		}

		# Declare arrays
		delete creds
		delete read
		delete write
		delete read_write
		delete read_write_sorted
	}

	######################################## FUNCTIONS

	function buffer_add(text) { BUFFER = BUFFER text }
	function print_buffer() { printf "%s", BUFFER }

	function clear_buffer()
	{
		BUFFER = ""
		if (!output_json)
			buffer_add(sprintf("\033[H\033[J"))
	}

	function buffer_add_header()
	{
		if (output_json) return
		buffer_add(sprintf("Interval: %-*s %31s\n",
			fmtsz - 9 - 2 - 31,
			sprintf("%.3f", interval) "s",
			strftime("%c",systime())))
				#  9 = "Interval:"
				#  2 = number of spaces
				# 31 = %31s = date
		buffer_add(sprintf("\033[7;1m" fmt "\033[27;22m", view,
			"TOTAL", "WRITE(IN)", bar_size, "", bar_size, "",
			"READ(OUT)"))
	}

	function load_files()
	{
		delete uid2name
		while (getline < passwd_map > 0) {
			n = split($0, fields, /:/)
			uid2name[fields[3]] = fields[1]
		}
		close(passwd_map)

		delete gid2name
		while (getline < group_map > 0) {
			n = split($0, fields, /:/)
			gid2name[fields[3]] = fields[1]
		}
		close(group_map)
	}

	function parse_map()
	{
		if (!match($0, /^@[^\[]*\[/)) return 0
		map = substr($0, RSTART + 1, RLENGTH - 2)
		if (view_client || view_server) {
			match($0, /\[.*\]:/)
			ip = substr($0, RSTART + 1, RLENGTH - 3)
		} else if (view_file) {
			match($0, /\[.*\]:/)
			path = substr($0, RSTART + 1, RLENGTH - 3)
			gsub(/, /, "/", path)
			gsub("//+", "/", path)
		} else {
			match($0, /\[[0-9]+,/)
			uid = int(substr($0, RSTART + 1, RLENGTH - 2))
			match($0, / [0-9]+\]/)
			gid = int(substr($0, RSTART + 1, RLENGTH - 2))
		}
		value = $NF
		return 1
	}

	function humanize(value,        raw, n, suffix, suffixes)
	{
		raw = value
		n = split(",K,M,G,T,E", suffixes, /,/)
		for (suffix = 1; suffix <= n; suffix++) {
			if (int(value) < 1024) break
			value /= 1024
		}
		if (v ~ /\./) sub(/\.?0+$/, "", v)
		value = sprintf("%'"'"'.2f%sB/s", value, suffixes[suffix])
		return value
	}

	function _asort(src, dest,        k, nitems, i, val)
	{
		k = nitems = 0
		for (i in src) dest[++nitems] = src[i]
		for (i = 1; i <= nitems; k = i++) {
			val = dest[i]
			while ((k > 0) && (dest[k] > val)) {
				dest[k+1] = dest[k]; k--
			}
			dest[k+1] = val
		}
		return nitems
	}

	function json_add(json, key, format, value)
	{
		return json (length(json) < 2 ? "" : ",") \
			sprintf("\"%s\":" format, key, value)
	}

	function json_add_str(json, key, value)
	{
		return json_add(json, key, "\"%s\"", value)
	}

	function json_add_uint(json, key, value)
	{
		return json_add(json, key, "%u", value)
	}

	######################################## MAIN

	raw_view {
		print
		next
	}

	/^===$/ {
		clear_buffer()
		buffer_add_header()
		next
	}

	sub(/^info\|/, "") {
		if (!output_json) print
		next
	}

	parse_map() {
		if (view_client || view_server) {
			cred = ip
		} else if (view_file) {
			cred = path
			if (filter_file != "" && path !~ filter_file)
				next
		} else if (view_group) {
			cred = gid
		} else { # Default
			cred = uid
		}
		creds[cred]
		if (map == "nfsd_read") {
			read[cred] += value
			read_write[cred] += value
		} else if (map == "nfsd_write") {
			write[cred] += value
			read_write[cred] += value
		}
	}

	/^---$/ {
		# Decorate combined read/write values with cred for sorting
		for (cred in read_write) {
			value = read_write[cred]
			read_write[cred] = sprintf("%99d %s", value, cred)
		}

		# Calculate and print totals
		read_total = write_total = 0
		for (cred in creds) {
			read_total += read[cred]
			write_total += write[cred]
		}
		read_rate = read_total / interval
		read_bar = ""
		write_rate = write_total / interval
		write_bar = ""
		if (output_json) {
			json_out = ""
			json_out = json_add_uint(json_out, "time", systime())
			json_out = json_add_str(json_out, "ident", "total")
			json_out = json_add_uint(json_out,
				"total_bytes", write_total + read_total)
			json_out = json_add_uint(json_out,
				"write_bytes", write_total)
			json_out = json_add_uint(json_out,
				"read_bytes", read_total)
			buffer_add("{" json_out "}\n")
		} else {
			buffer_add(sprintf(fmt, "total",
				humanize(write_rate + read_rate),
				humanize(write_rate), bar_size, write_bar,
				bar_size, read_bar, humanize(read_rate)))
		}

		# Sort values, extract cred, and print
		r = 1
		n = _asort(read_write, read_write_sorted)
		table_rows = output_json ? n : rows - 4
		for (i = n; i >= 1 && r++ <= table_rows; i--) {
			cred = read_write_sorted[i]
			sub(/^ *[^ ]+ +/, "", cred)
			write_rate = write[cred] / interval

			if (write_total > 0)
				write_bar_pct = write[cred] / write_total
			write_bar_size = bar_size * write_bar_pct
			write_bar = sprintf("%*s", write_bar_size, "")
			gsub(/ /, "=", write_bar)
			sub(/^./, "<", write_bar)

			read_rate = read[cred] / interval
			if (read_total > 0)
				read_bar_pct = read[cred] / read_total
			read_bar_size = bar_size * read_bar_pct
			read_bar = sprintf("%*s", read_bar_size, "")
			gsub(/ /, "=", read_bar)
			sub(/.$/, ">", read_bar)

			if (!no_names) {
				if (view_group) {
					if (cred in gid2name)
						cred = gid2name[cred]
				} else if (view_user) {
					if (cred in uid2name)
						cred = uid2name[cred]
				}
				if (!output_json && length(cred) > vsz) {
					cred = "..." substr(cred,
						length(cred) - vsz + 4)
				}
			}

			if (output_json) {
				json_out = ""
				json_out = json_add_uint(json_out,
					"time", systime())
				json_out = json_add_str(json_out,
					"ident", tolower(view))
				json_out = json_add_str(json_out,
					tolower(view), cred)
				json_out = json_add_uint(json_out,
					"total_bytes",
					write_total + read_total)
				json_out = json_add_uint(json_out,
					"write_bytes", write_total)
				json_out = json_add_uint(json_out,
					"read_bytes", read_total)
				buffer_add("{" json_out "}\n")
			} else {
				buffer_add(sprintf(fmt, cred,
					humanize(write_rate + read_rate),
					humanize(write_rate), bar_size,
					write_bar, bar_size, read_bar,
					humanize(read_rate)))
			}
		}
		if (i > 0) buffer_add(sprintf("(%d more) ... ", i))

		# Clean up
		delete creds
		delete read
		delete write
		delete read_write
		delete read_write_sorted

		print_buffer()
		next
	}

	############################################################
	# END
	############################################################
' # END-QUOTE
/* -*- mode: dtrace-script; tab-width: 4 -*- ;; Emacs
 * vi: set ft=dtrace noet ts=4 sw=4 :: Vi/ViM
 */
////////////////////////////////////////////////// INCLUDES

#include <linux/sunrpc/svc.h>

////////////////////////////////////////////////// BEGIN

BEGIN {
	printf("===\n"); // Clear screen and draw header
	printf("info|Sampling data for ${INTERVAL}s (\`-i sec')...\n");
}

////////////////////////////////////////////////// READ PROBES

kprobe:nfsd_read
{
	@nfsd_read_rqstp[tid] = (struct svc_rqst *)arg0;
	@nfsd_read_countp[tid] = arg5;
}
${VIEW_FILE:+"
kprobe:nfsd_init_raparms
/@nfsd_read_rqstp[tid] != 0/
{
	@nfsd_read_file[tid] = (struct file *)arg0;
}
"}
kretprobe:nfsd_read
/@nfsd_read_rqstp[tid] != 0 && @nfsd_read_countp[tid] != 0/
{
	\$rqstp = @nfsd_read_rqstp[tid];
	\$uid = \$rqstp->rq_cred.cr_uid.val;
	\$gid = \$rqstp->rq_cred.cr_gid.val;
	\$countp = @nfsd_read_countp[tid];
	\$bytes = *\$countp;

	delete(@nfsd_read_countp[tid]);
	delete(@nfsd_read_rqstp[tid]);

	\$filtered = 0;
${FILTER_USER:+"
	if (\$uid != $FILTER_USER) { \$filtered = 1; }"}
${FILTER_GROUP:+"
	if (\$gid != $FILTER_GROUP) { \$filtered = 1; }"}

	if (\$filtered == 0) {
$( if [ "$VIEW_CLIENT" ]; then cat <<VIEW
		if (\$rqstp->rq_addr.ss_family == AF_INET) {
			\$data = (int64 *)\$rqstp->rq_addr.__data;
			\$num = (int64)*\$data;
			\$ip4 = \$num >> 16 & 0xFFFFFFFF;
			\$client = ntop(AF_INET, \$ip4);

			@nfsd_read[\$client] = sum(\$bytes);
		}
VIEW
elif [ "$VIEW_FILE" ]; then cat <<VIEW
		\$file = @nfsd_read_file[tid];
		\$de = \$file->f_dentry;
		\$n1 = \$de->d_name.name;
		\$de = \$de->d_parent;
		\$n2 = \$de->d_name.name;

		delete(@nfsd_read_file[tid]);

		@nfsd_read[str(\$n2), str(\$n1)] = sum(\$bytes);
VIEW
elif [ "$VIEW_SERVER" ]; then cat <<VIEW
		if (\$rqstp->rq_daddr.ss_family == AF_INET) {
			\$data = (int64 *)\$rqstp->rq_daddr.__data;
			\$num = (int64)*\$data;
			\$ip4 = \$num >> 16 & 0xFFFFFFFF;
			\$server = ntop(AF_INET, \$ip4);

			@nfsd_read[\$server] = sum(\$bytes);
		}
VIEW
else cat <<VIEW
		@nfsd_read[\$uid, \$gid] = sum(\$bytes);
VIEW
fi )
	}
}

////////////////////////////////////////////////// WRITE PROBES

kprobe:nfsd_write
{
	@nfsd_write_rqstp[tid] = (struct svc_rqst *)arg0;
	@nfsd_write_countp[tid] = arg5;
}
${VIEW_FILE:+"
kprobe:nfsd_vfs_write
/@nfsd_write_rqstp[tid] != 0/
{
	@nfsd_write_file[tid] = (struct file *)arg2;
}
"}
kretprobe:nfsd_write
/@nfsd_write_rqstp[tid] != 0 && @nfsd_write_countp[tid] != 0/
{
	\$rqstp = @nfsd_write_rqstp[tid];
	\$uid = \$rqstp->rq_cred.cr_uid.val;
	\$gid = \$rqstp->rq_cred.cr_gid.val;
	\$countp = @nfsd_write_countp[tid];
	\$bytes = *\$countp;

	delete(@nfsd_write_countp[tid]);
	delete(@nfsd_write_rqstp[tid]);

	\$filtered = 0;
${FILTER_USER:+"
	if (\$uid != $FILTER_USER) { \$filtered = 1; }"}
${FILTER_GROUP:+"
	if (\$gid != $FILTER_GROUP) { \$filtered = 1; }"}

	if (\$filtered == 0) {
$( if [ "$VIEW_CLIENT" ]; then cat <<VIEW
		if (\$rqstp->rq_addr.ss_family == AF_INET) {
			\$data = (int64 *)\$rqstp->rq_addr.__data;
			\$num = (int64)*\$data;
			\$ip4 = \$num >> 16 & 0xFFFFFFFF;
			\$client = ntop(AF_INET, \$ip4);

			@nfsd_write[\$client] = sum(\$bytes);
		}
VIEW
elif [ "$VIEW_FILE" ]; then cat <<VIEW
		\$file = @nfsd_write_file[tid];
		\$de = \$file->f_dentry;
		\$n1 = \$de->d_name.name;
		\$de = \$de->d_parent;
		\$n2 = \$de->d_name.name;

		delete(@nfsd_write_file[tid]);

		@nfsd_write[str(\$n2), str(\$n1)] = sum(\$bytes);
VIEW
elif [ "$VIEW_SERVER" ]; then cat <<VIEW
		if (\$rqstp->rq_daddr.ss_family == AF_INET) {
			\$data = (int64 *)\$rqstp->rq_daddr.__data;
			\$num = (int64)*\$data;
			\$ip4 = \$num >> 16 & 0xFFFFFFFF;
			\$server = ntop(AF_INET, \$ip4);

			@nfsd_write[\$server] = sum(\$bytes);
		}
VIEW
else cat <<VIEW
		@nfsd_write[\$uid, \$gid] = sum(\$bytes);
VIEW
fi )
	}
}

////////////////////////////////////////////////// INTERVAL PROBE

$INTERVAL_PROBE
{
	printf("===\n");

	// Print
	print(@nfsd_read);
	print(@nfsd_write);

	// Clear
	clear(@nfsd_read);
	clear(@nfsd_write);

	printf("---\n");
}

////////////////////////////////////////////////// END

END
{
	// Clear read
	clear(@nfsd_read);
	clear(@nfsd_read_countp);${VIEW_FILE:+
	clear(@nfsd_read_file);}
	clear(@nfsd_read_rqstp);

	// Clear write
	clear(@nfsd_write);
	clear(@nfsd_write_countp);${VIEW_FILE:+
	clear(@nfsd_write_file);}
	clear(@nfsd_write_rqstp);
}

//////////////////////////////////////////////////////////////////////
// END
//////////////////////////////////////////////////////////////////////
EOF

exit $SUCCESS

################################################################################
# END
################################################################################
